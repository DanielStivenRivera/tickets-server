import { MigrationInterface, QueryRunner } from 'typeorm';
import * as bcrypt from 'bcryptjs';

export class Companies1738108740977 implements MigrationInterface {
  name = 'Companies1738108740977';

  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `CREATE TABLE "companies" ("id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "name" character varying NOT NULL, "nit" character varying NOT NULL, "email" character varying NOT NULL, "phone" character varying NOT NULL, "address" character varying NOT NULL, CONSTRAINT "UQ_ed61d4dcafb6fe0f595f5e0cbd0" UNIQUE ("nit"), CONSTRAINT "UQ_d0af6f5866201d5cb424767744a" UNIQUE ("email"), CONSTRAINT "PK_d4bc3e82a314fa9e29f652c2c22" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `ALTER TABLE "users" ADD "companyId" integer NOT NULL`,
    );
    await queryRunner.query(
      `ALTER TABLE "users" ADD CONSTRAINT "FK_6f9395c9037632a31107c8a9e58" FOREIGN KEY ("companyId") REFERENCES "companies"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`,
    );
    await queryRunner.query(
      `INSERT INTO "companies" (name, nit, email, phone, address) VALUES ('Company 1', '1234567892', 'company1@email.com', '123456789', 'Address 1')`,
    );
    await queryRunner.query(
      `INSERT INTO "companies" (name, nit, email, phone, address) VALUES ('Company 2', '1234567893', 'company2@email.com', '123456789', 'Address 2')`,
    );
    await queryRunner.query(
      `INSERT INTO "companies" (name, nit, email, phone, address) VALUES ('Company 3', '1234567894', 'company3@email.com', '123456789', 'Address 3')`,
    );
    const hashedPassword = await bcrypt.hash('Password123', 10);
    await queryRunner.query(
      `INSERT INTO "users" (email, password, "name", "companyId") VALUES ('example@mail.com', '${hashedPassword}', 'User 1', 1)`,
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `ALTER TABLE "users" DROP CONSTRAINT "FK_6f9395c9037632a31107c8a9e58"`,
    );
    await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "companyId"`);
    await queryRunner.query(`DROP TABLE "companies"`);
  }
}
